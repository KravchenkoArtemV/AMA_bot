package telegramClient

import (
	translate "AMA_bot/pkg/translateAPI" // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–∞–∫–µ—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
	weather "AMA_bot/pkg/weatherAPI"     // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–∞–∫–µ—Ç —Å –ø–æ–≥–æ–¥–æ–π
	"fmt"
	"net/url"
	"strconv"
	"strings"
	"unicode"
)

// –ø–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç WEATHER API. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
func parseWeatherAnswer(weather weather.WeatherAnswer) string {
	// –ú–∞–ø–∞ –¥–ª—è —Å–º–∞–π–ª–æ–≤ –æ—Å–∞–¥–∫–æ–≤
	smilesMap := map[string][]string{
		"üå§":  {"–ë–µ–∑ –æ—Å–∞–¥–∫–æ–≤", "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å"},
		"‚òÅÔ∏è": {"–ü–∞—Å–º—É—Ä–Ω–æ", "–û–±–ª–∞—á–Ω–æ"},
		"üåß":  {"–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å", "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å", "–î–æ–∂–¥—å", "–õ–∏–≤–µ–Ω—å", "–®—Ç–æ—Ä–º", "–ù–µ–±–æ–ª—å—à–æ–π –ª–∏–≤–Ω–µ–≤—ã–π –¥–æ–∂–¥—å", "–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π –ª–∏–≤–Ω–µ–≤—ã–π –¥–æ–∂–¥—å"},
		"‚ùÑÔ∏è": {"–°–Ω–µ–≥", "–ú–µ—Ç–µ–ª—å", "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥"},
		"üå´":  {"–¢—É–º–∞–Ω", "–î—ã–º–∫–∞"},
	}
	var smileIcon string = "‚òÄ"

	for i, v := range smilesMap {
		for _, precipitation := range v {
			if precipitation == weather.Precipitation {
				smileIcon = i
			}
		}
	}

	// –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –≥–æ—Ä–æ–¥–∞
	resultCity := ""
	cityName := translate.EngToRus(weather.City)
	if strings.Contains(cityName, "q") || strings.Contains(cityName, "langpair") {
		cityName = strings.ReplaceAll(cityName, "q", "")
		cityName = strings.ReplaceAll(cityName, "langpair", "")
		cityName = strings.ReplaceAll(cityName, "en", "")
		cityName = strings.ReplaceAll(cityName, "ru", "")

	}
	if strings.Contains(cityName, "Re") {
		cityName = strings.ReplaceAll(cityName, "Re", "")

	}

	for i, symbol := range cityName {
		if i == 0 && symbol == '–≥' {
			continue
		}
		if !unicode.IsLetter(symbol) && symbol != '-' && symbol != ' ' {
			continue
		}
		resultCity += string(symbol)
	}

	result := fmt.Sprintf(
		"üèô –ì–æ—Ä–æ–¥: %s\nüå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %d¬∞C\n%v %s\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: %d%%\nüí® –í–µ—Ç–µ—Ä: %.2f –º/—Å",
		resultCity, weather.Temperature, smileIcon, weather.Precipitation, weather.Humidity, weather.Wind/3.6)
	if weather.City == "" {
		result = "üí´ –í–æ–∑–º–æ–∂–Ω–æ –∑–≤–µ–∑–¥—ã –Ω–µ —Ç–∞–∫ —Å–æ—à–ª–∏—Å—å...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≥–æ—Ä–æ–¥ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π.\n–ü—Ä–∏–º–µ—Ä -> Krasnodar"
	}
	return result
}

// –ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Å–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ—Ç–∞
func (c *Client) SendMessage(chatID int, text string) error {
	q := url.Values{}
	q.Add("chat_id", strconv.Itoa(chatID))
	q.Add("text", text)

	_, err := c.doRequest("sendMessage", q)

	if err != nil {
		return fmt.Errorf("can't do request: %v", err)
	}
	return nil
}

// –ì–æ–ª–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
func answerForUser(client *Client, chatID int64, weatherData weather.WeatherAnswer) { // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ weather.WeatherAnswer –∑–¥–µ—Å—å
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	message := parseWeatherAnswer(weatherData)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	err := client.SendMessage(int(chatID), message)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v\n", err)
	}
}
